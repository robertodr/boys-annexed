import datetime
from pathlib import Path

from sympy import Float, Matrix, Pow, eye, factorial, zeros
from tqdm import trange

_PADE_TEMPLATE = """#pragma once

#include <array>

/* This file was autogenerated on {date_and_time} DO NOT EDIT! */

/** Pretabulated coefficients for the [{P}/{Q}] Padé approximants of the Boys function of orders 1 <= O <= {max_order}.
 *  The coefficients are in natural order: from lowest to highest power.
 */
namespace pade_{P:02d}_{Q:02d} {{
/** Numerator of Padé approximant */
template <auto order> inline constexpr auto Ps() -> std::array<double, {len_Ps}>;
/** Denominator of Padé approximant */
template <auto order> inline constexpr auto Qs() -> std::array<double, {len_Qs}>;

{lines}
}}  // namespace pade_{P:02d}_{Q:02d}
"""

_LINES = """/**@{{ [{P}/{Q}] Padé approximant coefficients for Boys function of order {order} */
/** Numerator of Padé approximant */
template <>
inline constexpr auto Ps<{order}>() -> std::array<double, {len_Ps}> {{ return std::array<double, {len_Ps}>{{{{ {ps} }}}}; }}
/** Denominator of Padé approximant */
template <>
inline constexpr auto Qs<{order}>() -> std::array<double, {len_Qs}> {{ return std::array<double, {len_Qs}>{{{{ {qs} }}}}; }}
/**@}}*/
"""

_CPP = """#pragma once

#include <stdexcept>
#include <string>

/* This file was autogenerated on {date_and_time} DO NOT EDIT! */

namespace pade_{P:02d}_{Q:02d} {{
auto
boys_function_pade(size_t order, const std::vector<double>& xs) -> void
{{
    switch (order)
    {{
       {lines}
       default:
           throw invalid_argument("Maximum supported order is {max_order}. Requested order is " + std::to_string(order));
    }}
}}
}}  // namespace pade
"""


def _boys_taylor_coeffs(*, j, k_max):
    return Matrix(
        k_max,
        1,
        lambda i, _: Pow(-1, i) / ((2 * j + 2 * i + 1) * factorial(i)),
    )


def _pade(an, *, deg_den: int, deg_num: int):
    if deg_num < 0 or deg_den < 0:
        raise ValueError("Order of p/q must be greater than 0.")

    N = deg_den + deg_num
    if N > len(an) - 1:
        raise ValueError("Order of q+p <m+n> must be smaller than len(an).")

    an = Matrix(an[: N + 1])
    Akj = eye(N + 1, deg_num + 1)
    Bkj = zeros(N + 1, deg_den)

    for row in range(1, deg_den + 1):
        Bkj[row, :row] = [(an[:row])[::-1]]

    for row in range(deg_den + 1, N + 1):
        Bkj[row, :] = [(an[row - deg_den : row])[::-1]]

    C = Akj.row_join(-Bkj)
    pq = C.LUsolve(an)
    p = pq[: deg_num + 1]
    q = pq[deg_num + 1 :]
    q.insert(0, Float(1))

    return p, q


def generate(folder: Path, *, max_order: int, P: int, Q: int) -> None:
    date_and_time = datetime.datetime.now().isoformat(timespec="minutes")

    # generate CMakeLists.txt
    with Path(folder / "CMakeLists.txt").open("w") as fh:
        fh.write(
            f"""# This file was autogenerated on {date_and_time} DO NOT EDIT!

        target_sources(run PRIVATE Pade.cpp)
        """
        )

    # generate source file
    with Path(folder / "Pade.cpp").open("w") as fh:
        fh.write(
            _CPP.format(
                date_and_time=date_and_time,
                max_order=max_order,
                P=P,
                Q=Q,
                lines="\n".join(
                    [
                        f"case {n}:\n    return boys_function_pade<{n}>(xs.data());"
                        for n in range(max_order + 1)
                    ]
                ),
            )
        )

    (folder / "approximants").mkdir(parents=True, exist_ok=True)

    lines = []
    for n in trange(1, max_order + 1):
        Ps, Qs = _pade(_boys_taylor_coeffs(j=n, k_max=60), deg_den=Q, deg_num=P)

        lines.append(
            _LINES.format(
                P=P,
                Q=Q,
                order=n,
                len_Ps=len(Ps),
                len_Qs=len(Qs),
                ps=", ".join([format(_.evalf(30), "3.20e") for _ in Ps]),
                qs=", ".join([format(_.evalf(30), "3.20e") for _ in Qs]),
            )
        )

        with (folder / f"approximants/Coefficients_{P:02d}_{Q:02d}.hpp").open(
            "w"
        ) as fh:
            fh.write(
                _PADE_TEMPLATE.format(
                    date_and_time=date_and_time,
                    P=P,
                    Q=Q,
                    max_order=max_order,
                    len_Ps=len(Ps),
                    len_Qs=len(Qs),
                    lines="\n".join(lines),
                )
            )
