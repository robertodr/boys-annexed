import datetime
from pathlib import Path

from sympy import Matrix, Pow, Range, factorial, lowergamma, symbols
from tqdm import trange

_MD_TEMPLATE = """#pragma once

#include <array>

/* This file was autogenerated on {date_and_time} DO NOT EDIT! */

namespace mcmurchie_davidson {{
/** Pretabulated coefficients for the seven-term Taylor expansion of the Boys function of order {order}.
 *  See: McMurchie, L. E.; Davidson, E. R. J. Comput. Phys. 1978, 26, 218. https://doi.org/10.1016/0021-9991(78)90092-X
 *  Row i contains the coefficients for the expansion at point i. The
 *  coefficients are in natural order: from 0-th to 6-th power.
 */
template <> inline constexpr std::array<std::array<double, 7>, 121> pretabulated<{order}>() {{
  // clang-format off
  return {{{{{lines}}}}};
  // clang-format on
}}
}} // namespace mcmurchie_davidson
"""

_PRETABULATED = """#pragma once

#include <array>

/* This file was autogenerated on {date_and_time} DO NOT EDIT! */

namespace mcmurchie_davidson {{
/**
 * Pretabulated values of given order.
 *
 * @tparam order Order of the table to fetch.
 * @return table of values.
 */
template <auto order>
inline constexpr std::array<std::array<double, 7>, 121> pretabulated();
}}  // namespace mcmurchie_davidson

{lines}
"""

_CPP = """#pragma once

#include <stdexcept>

/* This file was autogenerated on {date_and_time} DO NOT EDIT! */

namespace mcmurchie_davidson {{
auto
boys_function_md(size_t order, const std::vector<T>& xs) -> void
{{
    switch (order)
    {{
       {lines}
       default:
           throw invalid_argument("Maximum supported order is {max_order}. Requested order is " + std::to_string(order));
    }}
}}
}}  // namespace mcmurchie_davidson
"""


def generate(folder: Path, *, max_order: int) -> None:
    date_and_time = datetime.datetime.now().isoformat(timespec="minutes")
    # generate include file with interface
    with Path(folder / "Pretabulated.hpp").open("w") as fh:
        fh.write(
            _PRETABULATED.format(
                date_and_time=date_and_time,
                lines="\n".join(
                    [
                        f'#include "tables/BFunc_{n:02d}.hpp"'
                        for n in range(1, max_order + 1)
                    ]
                ),
            )
        )

    # generate source file
    with Path(folder / "McMurchieDavidson.cpp").open("w") as fh:
        fh.write(
            _CPP.format(
                date_and_time=date_and_time,
                max_order=max_order,
                lines="\n".join(
                    [
                        f"case {n}:\n    return boys_function_md<{n}>(xs.data());"
                        for n in range(max_order + 1)
                    ]
                ),
            )
        )

    # declare sympy symbols
    x, h = symbols("x h", real=True, positive=True)
    h = 0.1
    # assemble the factorial factors for the Taylor expansion beforehand
    taylors = Matrix([(Pow(-1, i) / factorial(i)) for i in Range(7)])

    (folder / "tables").mkdir(parents=True)

    for n in trange(1, max_order + 1):
        ls = []
        x = 0
        for i in range(121):
            vs = []
            if i == 0:
                # at x = 0.0, we can evaluate the Boys function analytically
                vs = Matrix(
                    [(1 / (2 * i + 1)) for i in Range(n, n + 7)]
                ).multiply_elementwise(taylors)
            else:
                # away from 0.0, we use the lower gamma function
                vs = Matrix(
                    [
                        lowergamma(i + 1 / 2, x) / (2 * Pow(x, i + 1 / 2))
                        for i in Range(n, n + 7)
                    ]
                ).multiply_elementwise(taylors)
            ls.append(f"{{{', '.join([format(v.evalf(30), '3.20e') for v in vs])}}}")
            # next point
            x += h

        with (folder / f"tables/BFunc_{n:02d}.hpp").open("w") as fh:
            fh.write(
                _MD_TEMPLATE.format(
                    date_and_time=date_and_time,
                    order=n,
                    lines=f",\n{' '*11}".join(ls),
                )
            )
